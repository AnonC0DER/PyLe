{
    "_comment" : "Trying for shorter codes :)",

    "Colors" : {
        "colored_dec": "\nVery simple Python library for color and formatting in terminal. \nCollection of color codes and names for 256 color terminal setups. \nThe following is a list of 256 colors for Xterm, containing an example of the displayed color, Xterm Name, Xterm Number and HEX.\n",
        "colored_exm": "\nHow to use the module in your own python code:\n\n>>> from colored import fg, bg, attr\n>>>\n>>> print ('%s Hello World !!! %s' % (fg(1), attr(0)))\n Hello World !!!\n>>>\n>>> print ('%s%s Hello World !!! %s' % (fg(1), bg(15), attr(0)))\n Hello World !!!\nUse description:\n\n>>> print ('%s%s Hello World !!! %s' % (fg('white'), bg('yellow'), attr('reset')))\n Hello World !!!\n>>>\n>>> print ('%s%s Hello World !!! %s' % (fg('orchid'), attr('bold'), attr('reset')))\n Hello World !!!\n>>>\n>>> color = bg('indian_red_1a') + fg('white')\n>>> reset = attr('reset')\n>>> print (color + 'Hello World !!!' + reset)\nHello World !!!\nOr use HEX code:\n\n>>> color = fg('#C0C0C0') + bg('#00005f')\n>>> res = attr('reset')\n>>> print (color + \"Hello World !!!\" + res)\nHello World !!!\n",
        "colorama_dec": "\nANSI escape character sequences have long been used to produce colored terminal text and cursor positioning on Unix and Macs. \nColorama makes this work on Windows, too, by wrapping stdout, stripping ANSI sequences it finds (which would appear as gobbledygook in the output), and converting them into the appropriate win32 calls to modify the state of the terminal. On other platforms, Colorama does nothing.\nThis has the upshot of providing a simple cross-platform API for printing colored terminal text from Python, and has the happy side-effect that existing applications or libraries which use ANSI sequences to produce colored output on Linux or Macs can now also work on Windows, simply by calling colorama.init()\nAn alternative approach is to install ansi.sys on Windows machines, which provides the same behaviour for all applications running in terminals. \nColorama is intended for situations where that isn\u2019t easy (e.g., maybe your app doesn\u2019t have an installer.)\n",
        "colorama_exm": "\nColored Output\nCross-platform printing of colored text can then be done using Colorama\u2019s constant shorthand for ANSI escape sequences:\n\nfrom colorama import Fore, Back, Style\nprint(Fore.RED + 'some red text')\nprint(Back.GREEN + 'and with a green background')\nprint(Style.DIM + 'and in dim text')\nprint(Style.RESET_ALL)\nprint('back to normal now')\n\n\u2026or, Colorama can be used in conjunction with existing ANSI libraries such as the venerable Termcolor or the fabulous Blessings. This is highly recommended for anything more than trivial coloring:\n\nfrom colorama import init\nfrom termcolor import colored\n\n# use Colorama to make Termcolor work on Windows too\ninit()\n\n# then use Termcolor for all colored text output\nprint(colored('Hello, World!', 'green', 'on_red'))\n",
        "termcolor_dec" : "Termcolor is a python module for ANSII Color formatting for output in terminal.",
        "termcolor_exm": "\nimport sys\nfrom termcolor import colored, cprint\n\ntext = colored('Hello, World!', 'red', attrs=['reverse', 'blink'])\nprint(text)\ncprint('Hello, World!', 'green', 'on_red')\n\nprint_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan')\nprint_red_on_cyan('Hello, World!')\nprint_red_on_cyan('Hello, Universe!')\n\nfor i in range(10):\n    cprint(i, 'magenta', end=' ')\n\ncprint(\"Attention!\", 'red', attrs=['bold'], file=sys.stderr)\n"
    },
    
    "Machin_Learning" : {
        "scikit_dec": "\nScikit-learn is a Python module for machine learning built on top of SciPy and is distributed under the 3-Clause BSD license.\nThe project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed.\nSee the About us page for a list of core contributors.\nIt is currently maintained by a team of volunteers.\n",
        "scikit_req": "\n\n. Python (>= 3.6)\n. NumPy (>= 1.13.3)\n. SciPy (>= 0.19.1)\n. joblib (>= 0.11)\n. threadpoolctl (>= 2.0.0)\n",
        "keras_dec": "\nKeras is a deep learning API written in Python, running on top of the machine learning platform TensorFlow. \nIt was developed with a focus on enabling fast experimentation. \nBeing able to go from idea to result as fast as possible is key to doing good research.\n",
        "keras_exm": "\nSetup\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import layers\nPrepare the dataset\nIn this example, we will be using the FashionMNIST dataset. But this same recipe can be used for other classification datasets as well.\n\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()\n\nx_train = x_train.astype(\"float32\") / 255.0\nx_train = np.reshape(x_train, (-1, 28, 28, 1))\ny_train = tf.one_hot(y_train, 10)\n\nx_test = x_test.astype(\"float32\") / 255.0\nx_test = np.reshape(x_test, (-1, 28, 28, 1))\ny_test = tf.one_hot(y_test, 10)\nDefine hyperparameters\nAUTO = tf.data.AUTOTUNE\nBATCH_SIZE = 64\nEPOCHS = 10\nConvert the data into TensorFlow Dataset objects\n# Put aside a few samples to create our validation set\nval_samples = 2000\nx_val, y_val = x_train[:val_samples], y_train[:val_samples]\nnew_x_train, new_y_train = x_train[val_samples:], y_train[val_samples:]\n\ntrain_ds_one = (\n    tf.data.Dataset.from_tensor_slices((new_x_train, new_y_train))\n    .shuffle(BATCH_SIZE * 100)\n    .batch(BATCH_SIZE)\n)\ntrain_ds_two = (\n    tf.data.Dataset.from_tensor_slices((new_x_train, new_y_train))\n    .shuffle(BATCH_SIZE * 100)\n    .batch(BATCH_SIZE)\n)\n# Because we will be mixing up the images and their corresponding labels, we will be\n# combining two shuffled datasets from the same training data.\ntrain_ds = tf.data.Dataset.zip((train_ds_one, train_ds_two))\n\nval_ds = tf.data.Dataset.from_tensor_slices((x_val, y_val)).batch(BATCH_SIZE)\n\ntest_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(BATCH_SIZE)\n",
        "xgboost_dec": "\nThat XGBoost is a library for developing fast and high performance gradient boosting tree models. \nThat XGBoost is achieving the best performance on a range of difficult machine learning tasks.\n",
        "xgboost_exm": "\n# First XGBoost model for Pima Indians dataset\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n# load data\ndataset = loadtxt('pima-indians-diabetes.csv', delimiter=\",\")\n# split data into X and y\nX = dataset[:,0:8]\nY = dataset[:,8]\n# split data into train and test sets\nseed = 7\ntest_size = 0.33\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n# fit model no training data\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\n# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n",
        "statsmodels_dec": "\nStatsmodels is a Python package that provides a complement to scipy for statistical computations \nincluding descriptive statistics and estimation and inference for statistical models.\n",
        "statsmodels_exm": "\nThe Python Code using Statsmodels\nThe following Python code includes an example of Multiple Linear Regression, where the input variables are:\n\nInterest_Rate\nUnemployment_Rate\nThese two variables are used in the prediction of the dependent variable of Stock_Index_Price.\n\nHere is the complete syntax to perform the linear regression in Python using statsmodels (for larger datasets, you may consider to import your data):\n\nfrom pandas import DataFrame\nimport statsmodels.api as sm\n\nStock_Market = {'Year': [2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016],\n                'Month': [12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1],\n                'Interest_Rate': [2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75],\n                'Unemployment_Rate': [5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5.9,6.2,6.2,6.1],\n                'Stock_Index_Price': [1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047,965,943,958,971,949,884,866,876,822,704,719]        \n                }\n\ndf = DataFrame(Stock_Market,columns=['Year','Month','Interest_Rate','Unemployment_Rate','Stock_Index_Price']) \n\nX = df[['Interest_Rate','Unemployment_Rate']] # here we have 2 variables for the multiple linear regression. If you just want to use one variable for simple linear regression, then use X = df['Interest_Rate'] for example\nY = df['Stock_Index_Price']\n\nX = sm.add_constant(X) # adding a constant\n\nmodel = sm.OLS(Y, X).fit()\npredictions = model.predict(X) \n\nprint_model = model.summary()\nprint(print_model)\n",
        "tensorflow_dec": "\nTensorFlow is an open source software library for high performance numerical computation. \nIts flexible architecture allows easy deployment of computation across a variety of platforms (CPUs, GPUs, TPUs), \nand from desktops to clusters of servers to mobile and edge devices.\nOriginally developed by researchers and engineers from the Google Brain team within Google's AI organization, \nit comes with strong support for machine learning and deep learning and the flexible numerical computation core is used across many other scientific domains.\n",
        "tensorflow_exm": "\nExample :\nIn the code below, we defined two constant tensors and add one value to another:\n\nimport tensorflow as tf\n\nconst1 = tf.constant([[1,2,3], [1,2,3]]);\nconst2 = tf.constant([[3,4,5], [3,4,5]]);\n\nresult = tf.add(const1, const2);\n\nwith tf.Session() as sess:\n  output = sess.run(result)\n  print(output)\n",
        "numpy_dec": "NumPy is the fundamental package for scientific computing in Python. \nIt is a Python library that provides a multidimensional array object, \nvarious derived objects (such as masked arrays and matrices), \nand an assortment of routines for fast operations on arrays, \nincluding mathematical, logical, shape manipulation, sorting, selecting, I/O, \ndiscrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.\nAt the core of the NumPy package, is the ndarray object. \nThis encapsulates n-dimensional arrays of homogeneous data types, \nwith many operations being performed in compiled code for performance.",
        "numpy_exm": ">>> import numpy as np\n>>> a = np.array([2,3,4])\n>>> a\narray([2, 3, 4])\n>>> a.dtype\ndtype('int64')\n>>> b = np.array([1.2, 3.5, 5.1])\n>>> b.dtype\ndtype('float64')",
        "scipy_dec": "\nSciPy is a collection of mathematical algorithms and convenience functions built on the NumPy \nextension of Python. It adds significant power to the interactive Python \nsession by providing the user with high-level commands and classes for manipulating \nand visualizing data. With SciPy, an interactive Python session becomes a data-processing \nand system-prototyping environment rivaling systems, such as MATLAB, IDL, Octave, R-Lab, and SciLab.\nThe additional benefit of basing SciPy on Python is that this also makes a powerful programming language \navailable for use in developing sophisticated programs and specialized applications. \nScientific applications using SciPy benefit from the development of additional modules \nin numerous niches of the software landscape by developers across the world. \nEverything from parallel programming to web and data-base subroutines and \nclasses have been made available to the Python programmer. \nAll of this power is available in addition to the mathematical libraries in SciPy.",
        "scipy_exm": "\nfrom scipy import special\ndef drumhead_height(n, k, distance, angle, t):\n   kth_zero = special.jn_zeros(n, k)[-1]\n   return np.cos(t) * np.cos(n*angle) * special.jn(n, distance*kth_zero)\ntheta = np.r_[0:2*np.pi:50j]\nradius = np.r_[0:1:50j]\nx = np.array([r * np.cos(theta) for r in radius])\ny = np.array([r * np.sin(theta) for r in radius])\nz = np.array([drumhead_height(1, 1, r, theta, 0.5) for r in radius])\n",
        "matplotlib_dec": "\nMatplotlib is a cross-platform, data visualization and graphical plotting library for Python \nand its numerical extension NumPy. As such, it offers a viable open source alternative to MATLAB. \nDevelopers can also use matplotlib\u2019s APIs (Application Programming Interfaces) \nto embed plots in GUI applications.",
        "matplotlib_exm": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nlabels = ['G1', 'G2', 'G3', 'G4', 'G5']\nmen_means = [20, 34, 30, 35, 27]\nwomen_means = [25, 32, 34, 20, 25]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width/2, men_means, width, label='Men')\nrects2 = ax.bar(x + width/2, women_means, width, label='Women')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\n\nplt.show()",
        "seaborn_dec": "\nSeaborn is a library for making statistical graphics in Python. \nIt builds on top of matplotlib and integrates closely with pandas data structures.\nSeaborn helps you explore and understand your data. \nIts plotting functions operate on dataframes and arrays containing whole \ndatasets and internally perform the necessary semantic mapping and statistical aggregation to \nproduce informative plots. Its dataset-oriented, declarative API lets you focus on what the \ndifferent elements of your plots mean, rather than on the details of how to draw them.",
        "seaborn_exm": "\n# Import seaborn\nimport seaborn as sns\n\n# Apply the default theme\nsns.set_theme()\n\n# Load an example dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)",
        "pytorch_dec": "\nPyTorch is an open source machine learning library based on the Torch library, \nused for applications such as computer vision and natural language processing, \nprimarily developed by Facebook's AI Research lab. It is free and open-source \nsoftware released under the Modified BSD license.",
        "pytorch_exm": "\nimport numpy as np\nimport math\n\n# Create random input and output data\nx = np.linspace(-math.pi, math.pi, 2000)\ny = np.sin(x)\n\n# Randomly initialize weights\na = np.random.randn()\nb = np.random.randn()\nc = np.random.randn()\nd = np.random.randn()\n\nlearning_rate = 1e-6\nfor t in range(2000):\n    # Forward pass: compute predicted y\n    # y = a + b x + c x^2 + d x^3\n    y_pred = a + b * x + c * x ** 2 + d * x ** 3\n\n    # Compute and print loss\n    loss = np.square(y_pred - y).sum()\n    if t % 100 == 99:\n        print(t, loss)\n\n    # Backprop to compute gradients of a, b, c, d with respect to loss\n    grad_y_pred = 2.0 * (y_pred - y)\n    grad_a = grad_y_pred.sum()\n    grad_b = (grad_y_pred * x).sum()\n    grad_c = (grad_y_pred * x ** 2).sum()\n    grad_d = (grad_y_pred * x ** 3).sum()\n\n    # Update weights\n    a -= learning_rate * grad_a\n    b -= learning_rate * grad_b\n    c -= learning_rate * grad_c\n    d -= learning_rate * grad_d\n\nprint(f'Result: y = {a} + {b} x + {c} x^2 + {d} x^3')",
        "pycaret_dec": "\nPyCaret is an open-source, low-code machine learning library in Python \nthat automates machine learning workflows. It is an end-to-end machine learning and model \nmanagement tool that speeds up the experiment cycle exponentially and makes you more productive.",
        "pycaret_exm": "\n# Loading data from pycaret\nfrom pycaret.datasets import get_data\ndata = get_data('juice') ",
        "pycaret_exm2": "\n# Importing dataset\nfrom pycaret.datasets import get_data\ndiabetes = get_data('diabetes')\n# Importing module and initializing setup\nfrom pycaret.classification import *\nclf1 = setup(data = diabetes, target = 'Class variable')\n# train a votingclassifier on all models in library\nblender = blend_models()\n# train a voting classifier on specific models\ndt = create_model('dt')\nrf = create_model('rf')\nadaboost = create_model('ada')\nblender_specific = blend_models(estimator_list = [dt,rf,adaboost], method = 'soft')\n# train a voting classifier dynamically\nblender_specific = blend_models(estimator_list = compare_models(n_select = 5), method = 'hard')"
    },

    "Telegram_bots" : {
        "python_telegram_bot_dec": "\nThis library provides a pure Python interface for the Telegram Bot API. It\u2019s compatible with Python versions 3.6+. PTB might also work on PyPy, though there have been a lot of issues before. Hence, PyPy is not officially supported.\nIn addition to the pure API implementation, this library features a number of high-level classes to make the development of bots easy and straightforward. These classes are contained in the telegram.ext submodule.\n",
        "python_telegram_bot_exm": "\nThis library uses the logging module. To set up logging to standard output, put:\n\nimport logging\nlogging.basicConfig(level=logging.DEBUG,\n                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nat the beginning of your script.\n\nYou can also use logs in your application by calling logging.getLogger() and setting the log level you want:\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\nIf you want DEBUG logs instead:\n\nlogger.setLevel(logging.DEBUG)\n",
        "pyrogram_dec": "Pyrogram is a modern, elegant and easy-to-use Telegram client library framework written from the ground up in Python and C. It enables you to easily create custom Telegram client applications for both user and bot identities (bot API alternative) via the MTProto API.",
        "pyrogram_req": "\nRequirements\n\n-Python 3.6 or higher.\n-A Telegram API key.",
        "pyrogram_exm": "\nfrom pyrogram import Client, filters\n\napp = Client(\"my_account\")\n\n\n@app.on_message(filters.private)\nasync def hello(client, message):\n    await message.reply_text(f\"Hello {message.from_user.mention}\")\n\n\napp.run()",
        "telegram_dec": "\nAn async API wrapper for Telegram bot API in Python\nPython 3.7+ is required to install and use telegram.py",
        "telegram_exm": "\nimport logging\n\nimport telegrampy\nfrom telegrampy.ext import commands\n\nlogging.basicConfig(level=logging.INFO, format=\"(%(asctime)s) %(levelname)s %(message)s\", datefmt=\"%m/%d/%y - %H:%M:%S %Z\")\nlogger = logging.getLogger(\"telegrampy\")\n\nbot = commands.Bot(\"token here\")\n\n@bot.command()\nasync def hi(ctx):\n    await ctx.send(\"Hello\")\n\nbot.run()"
    },

    "game_devel" : {
        "pygame_dec": "\nPygame is a free and open-source cross-platform library for the development of multimedia applications\nlike video games using Python. It uses the Simple DirectMedia Layer library and\nseveral other popular libraries to abstract the most common functions, \nmaking writing these programs a more intuitive task.",
        "pygame_exm": "\n# Simple pygame program\n\n# Import and initialize the pygame library\nimport pygame\npygame.init()\n\n# Set up the drawing window\nscreen = pygame.display.set_mode([500, 500])\n\n# Run until the user asks to quit\nrunning = True\nwhile running:\n\n    # Did the user click the window close button?\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Fill the background with white\n    screen.fill((255, 255, 255))\n    \n    # Draw a solid blue circle in the center\n    pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)\n\n    # Flip the display\n    pygame.display.flip()\n\n# Done! Time to quit.\npygame.quit()",
        "turtles_dec": "\nTurtle graphics is a popular way for introducing programming to kids. \nIt was part of the original Logo programming language developed by Wally Feurzeig, \nSeymour Papert and Cynthia Solomon in 1967.",
        "turtles_exm": "\nimport turtle \n\nninja = turtle.Turtle()\n\nninja.speed(10)\n\nfor i in range(180):\n    ninja.forward(100)\n    ninja.right(30)\n    ninja.forward(20)\n    ninja.left(60)\n    ninja.forward(50)\n    ninja.right(30)\n    \n    ninja.penup()\n    ninja.setposition(0, 0)\n    ninja.pendown()\n\n    ninja.right(2)\n    \nturtle.done()",
        "pyopengl_dec": "\nPyOpenGL is the most common cross platform Python binding to OpenGL and related APIs. \nThe binding is created using the standard ctypes library, \nand is provided under an extremely liberal BSD-style Open-Source license.",
        "pyopengl_exm": "\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import *\n\nwindow = 0                                             # glut window number\nwidth, height = 500, 400                               # window size\n\ndef draw():                                            # ondraw is called all the time\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) # clear the screen\n    glLoadIdentity()                                   # reset position\n   \n    # ToDo draw rectangle\n   \n    glutSwapBuffers()                                  # important for double buffering\n   \n\n# initialization\nglutInit()                                             # initialize glut\nglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH)\nglutInitWindowSize(width, height)                      # set window size\nglutInitWindowPosition(0, 0)                           # set window position\nwindow = glutCreateWindow(\"noobtuts.com\")              # create window with title\nglutDisplayFunc(draw)                                  # set draw function callback\nglutIdleFunc(draw)                                     # draw all the time\nglutMainLoop()                                         # start everything"
    },

    "file_enc" : {
        "cryptography_dec": "\nCryptography is a package which provides cryptographic recipes and primitives to Python developers. \nOur goal is for it to be your \u201ccryptographic standard library\u201d. \nIt supports Python 3.6+ and PyPy3 7.2+.\nCryptography includes both high level recipes and low level interfaces to common cryptographic \nalgorithms such as symmetric ciphers, message digests, \nand key derivation functions.",
        "cryptography_exm": "\n>>> from cryptography.fernet import Fernet\n>>> # Put this somewhere safe!\n>>> key = Fernet.generate_key()\n>>> f = Fernet(key)\n>>> token = f.encrypt(b\"A really secret message. Not for prying eyes.\")\n>>> token\nb'...'\n>>> f.decrypt(token)\nb'A really secret message. Not for prying eyes.",
        "pycrypto_dec": "\nThis is a collection of both secure hash functions (such as SHA256 and RIPEMD160), \nand various encryption algorithms (AES, DES, RSA, ElGamal, etc.). \nThe package is structured to make adding new modules easy. This section is essentially complete, \nand the software interface will almost certainly not change in an incompatible way in the future; \nall that remains to be done is to fix any bugs that show up.",
        "pycrypto_exm": "\n>>> from Crypto.Cipher import AES\n>>> obj = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')\n>>> message = \"The answer is no\"\n>>> ciphertext = obj.encrypt(message)\n>>> obj2 = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')\n>>> obj2.decrypt(ciphertext)\n'The answer is no' ",
        "pyaescrypt_dec": "\npyAesCrypt is a Python 3 file-encryption module and script that \nuses AES256-CBC to encrypt/decrypt files and binary streams.\npyAesCrypt is compatible with the AES Crypt file format (version 2).\nIt is Free Software, released under the Apache License, Version 2.0.\npyAesCrypt is brought to you by Marco Bellaccini - marco.bellaccini(at!)gmail.com.\nIMPORTANT SECURITY NOTE: version 2 of the AES Crypt file format does not authenticate the \u201cfile size modulo 16\u201d byte. \nThis implies that an attacker with write access to the encrypted file may \nalter the corresponding plaintext file size by up to 15 bytes.\nthere is no low-level memory management in Python, hence it is not possible to wipe \nmemory areas were sensitive information was stored.",
        "pyaescrypt_exm": "\nimport pyAesCrypt\n# encryption/decryption buffer size - 64K\nbufferSize = 64 * 1024\npassword = \"foopassword\"\n# encrypt\npyAesCrypt.encryptFile(\"data.txt\", \"data.txt.aes\", password, bufferSize)\n# decrypt\npyAesCrypt.decryptFile(\"data.txt.aes\", \"dataout.txt\", password, bufferSize)"
    },

    "sqllib" : {
        "sqlite_dec": "\nSQLite is a C library that provides a lightweight disk-based database that doesn\u2019t require \na separate server process and allows accessing the database using a nonstandard \nvariant of the SQL query language. Some applications can use SQLite for internal data storage. \nIt\u2019s also possible to prototype an application using SQLite and then port the code \nto a larger database such as PostgreSQL or Oracle.\nThe sqlite3 module was written by Gerhard H\u00e4ring. It provides a SQL interface \ncompliant with the DB-API 2.0 specification described by PEP 249.",
        "sqlite_exm": "\nimport sqlite3\ncon = sqlite3.connect('example.db')\ncur = con.cursor()\n\n# Create table\ncur.execute('''CREATE TABLE stocks\n(date text, trans text, symbol text, qty real, price real)''')\n\n# Insert a row of data\ncur.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")\n\n# Save (commit) the changes\ncon.commit()\n\n# We can also close the connection if we are done with it.\n# Just be sure any changes have been committed or they will be lost.\ncon.close()",
        "mysql_dec": "\nMySQL Connector/Python enables Python programs to access MySQL databases, \nusing an API that is compliant with the Python Database API Specification v2.0 (PEP 249).",
        "mysql_exm": "\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection(host_name, user_name, user_password):\n    connection = None\n    try:\n        connection = mysql.connector.connect(\n            host=host_name,\n            user=user_name,\n            passwd=user_password)\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\n    return connection\n\nconnection = create_connection(\"localhost\", \"root\", \"\")",
        "postgres_dec": "\nPostgreSQL is one of the most advanced and widely used relational database management systems. \nIt's extremely popular for many reasons, a few of which include it being open source, \nits extensibility, and its ability to handle many different types of applications and varying loads.\nWith Python, you can easily establish a connection to your PostgreSQL database. \nThere are many Python drivers for PostgreSQL, with \"psycopg\" being the most popular one. \nIts current version is psycopg2.\nIn this article, we'll be discussing how to access a PostgreSQL database \nin Python using the psycopg2 driver.",
        "postgres_exm": "\nimport psycopg2\n\ncon = psycopg2.connect(database=\"postgres\", user=\"postgres\", password=\"Kaliakakya\", host=\"127.0.0.1\", port=\"5432\")\nprint(\"Database opened successfully\")\n\ncur = con.cursor()\n\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3419, 'Abel', 17, 'Computer Science', 'ICT')\");\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3421, 'Joel', 17, 'Computer Science', 'ICT')\");\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3422, 'Antony', 19, 'Electrical Engineering', 'Engineering')\");\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3423, 'Alice', 18, 'Information Technology', 'ICT')\");\n\ncon.commit()\nprint(\"Records inserted successfully\")\ncon.close()"
    },

    "other" : {
        "os_dec": "\nThe OS module in Python provides functions for interacting with the operating system. \nOS comes under Python's standard utility modules. \nThis module provides a portable way of using operating system dependent functionality. \nThe *os* and *os. path* modules include many functions to interact with the file system",
        "os_exm": "\nfrom os import system\nsystem('clear')\n",
        "subprocess_dec": "\nThe subprocess module present in Python(both 2. ... x) is used to run new applications or \nprograms through Python code by creating new processes. \nIt also helps to obtain the input/output/error pipes as well as the exit codes of various commands.\n",
        "subprocess_exm": "\nimport subprocess\nimport sys\n\n# create two files to hold the output and errors, respectively\nwith open('out.txt','w+') as fout:\nwith open('err.txt','w+') as ferr:\n        out=subprocess.call([\"ls\",'-lha'],stdout=fout,stderr=ferr)\n        # reset file to read from it\n        fout.seek(0)\n        # save output (if any) in variable\n        output=fout.read())\n\n        # reset file to read from it\n        ferr.seek(0) \n        # save errors (if any) in variable\n        errors = ferr.read()\n",
        "urllib_request_dec": "\nThe urllib.request module defines functions and classes which help\nin opening URLs (mostly HTTP) in a complex world \u2014 basic and digest authentication, \nredirections, cookies and more. ... Open the URL url, which can be either a string or a Request object.\n",
        "urllib_request_exm": "\n>>> import urllib.request\n>>> with urllib.request.urlopen('http://www.python.org/') as f:\n...     print(f.read(300))\n",
        "requests_dec": "\nThe requests library is the de facto standard for making HTTP requests in Python. \nIt abstracts the complexities of making requests behind a beautiful, \nsimple API so that you can focus on interacting with services and consuming data in your application.\n",
        "requests_exm": "\nimport requests\nfrom requests.exceptions import HTTPError\n\nfor url in ['https://api.github.com', 'https://api.github.com/invalid']:\ntry:\n        response = requests.get(url)\n\n        # If the response was successful, no Exception will be raised\n        response.raise_for_status()\nexcept HTTPError as http_err:\n        print(f'HTTP error occurred: {http_err}')  # Python 3.6\n    except Exception as err:\n        print(f'Other error occurred: {err}')  # Python 3.6\n    else:\n        print('Success!')\n",
        "tkinter_dec": "\nTkinter is Python's de-facto standard GUI (Graphical User Interface) package. \nIt is a thin object-oriented layer on top of Tcl/Tk. Tkinter is not the only \nGuiProgramming toolkit for Python. It is however the most commonly used one. ... Graphical User \nInterfaces with Tk, a chapter from the Python Documentation.\n",
        "tkinter_exm": "\nfrom tkinter import *\n\nwindow = Tk()\n\nwindow.title(\"Welcome to LikeGeeks app\")\n\nlbl = Label(window, text=\"Hello\")\n\nlbl.grid(column=0, row=0)\n\nwindow.mainloop()",
        "pyqt_dec": "\nPyQt is a set of Python bindings for The Qt Company's Qt application framework and \nruns on all platforms supported by Qt including Windows, macOS, Linux, iOS and Android. \nPyQt6 supports Qt v6, PyQt5 supports Qt v5 and PyQt4 supports Qt v4. \nThe bindings are implemented as a set of Python modules and contain over 1,000 classes.\n",
        "pyqt_exm": "\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n\n\ndef main():\n\n    app = QApplication(sys.argv)\n\n    w = QWidget()\n    w.resize(250, 150)\n    w.move(300, 300)\n    w.setWindowTitle('Simple')\n    w.show()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == '__main__':\n    main()\n",
        "moviepy_dec": "\nMoviePy (full documentation) is a Python library for \nvideo editing: cutting, concatenations, title insertions, video compositing (a.k.a. non-linear editing), \nvideo processing, and creation of custom effects.\n",
        "moviepy_exm": "\nfrom moviepy import *\n\nvideo = VideoFileClip(\"myHolidays.mp4\").subclip(50,60)\n\n# Make the text. Many more options are available.\ntxt_clip = ( TextClip(\"My Holidays 2013\",fontsize=70,color='white')\n             .with_position('center')\n             .with_duration(10) )\n             \n# Overlay text on video\nresult = CompositeVideoClip([video, txt_clip])\nresult.write_videofile(\"myHolidays_edited.webm\",fps=25) # Many options...\n",
        "datetime_dec": "\nDatetime module supplies classes to work with date and time. \nThese classes provide a number of functions to deal with dates, times and time intervals. \nDate and datetime are an object in Python, so when you manipulate them, \nyou are actually manipulating objects and not string or timestamps.\n",
        "datetime_exm": "\n>>> import time\n>>> from datetime import date\n>>> today = date.today()\n>>> today\ndatetime.date(2007, 12, 5)\n>>> today == date.fromtimestamp(time.time())\nTrue\n>>> my_birthday = date(today.year, 6, 24)\n>>> if my_birthday < today:\n...     my_birthday = my_birthday.replace(year=today.year + 1)\n>>> my_birthday\ndatetime.date(2008, 6, 24)\n>>> time_to_birthday = abs(my_birthday - today)\n>>> time_to_birthday.days\n202\n",
        "pendulum_dec": "\nUnlike other datetime libraries for Python, Pendulum is a drop-in replacement for \nthe standard datetime class (it inherits from it), so, basically, you can \nreplace all your datetime instances by DateTime instances in \nyou code (exceptions exist for libraries that check the type of the objects \nby using the type function like sqlite3 or PyMySQL for instance).\n",
        "pendulum_exm": "\nimport pendulum\n\nin_utc = pendulum.datetime(2013, 3, 31, 0, 59, 59)\ntz = pendulum.timezone(\"Europe/Paris\")\nin_paris = tz.convert(in_utc)\n'2013-03-31T01:59:59+01:00'\n\n# Shifting time\nin_paris = in_paris.add(seconds=1)\n'2013-03-31T03:00:00+02:00'\nin_paris.subtract(seconds=1)\n'2013-03-31T01:59:59+01:00'\n",
        "pillow_dec": "\nPillow is a Python Imaging Library (PIL), which adds support for opening, manipulating, and saving images. \nThe current version identifies and reads a large number of formats. \nWrite support is intentionally restricted to the most commonly used interchange and presentation formats.\n",
        "pillow_exm": "\nfrom PIL import Image\nimport glob, os\n\nsize = 128, 128\n\nfor infile in glob.glob(\"*.jpg\"):\n    file, ext = os.path.splitext(infile)\nwith Image.open(infile) as im:\n        im.thumbnail(size)\n        im.save(file + \".thumbnail\", \"JPEG\")\n",
        "opencvpython_dec": "\nOpenCV-Python is a library of Python bindings designed to solve computer vision problems.\nPython is a general purpose programming language started by Guido van Rossum that became \nvery popular very quickly, mainly because of its simplicity and code readability. \nIt enables the programmer to express ideas in fewer lines of code without reducing readability.\nCompared to languages like C/C++, Python is slower. \nThat said, Python can be easily extended with C/C++, which allows us to write computationally \nintensive code in C/C++ and create Python wrappers that can be used as Python modules. \nThis gives us two advantages: first, the code is as fast as the original C/C++ code \n(since it is the actual C++ code working in background) and second, it easier to code in Python than C/C++. \nOpenCV-Python is a Python wrapper for the original OpenCV C++ implementation.\nOpenCV-Python makes use of Numpy, which is a highly optimized\nlibrary for numerical operations with a MATLAB-style syntax. \nAll the OpenCV array structures are converted to and from Numpy arrays. \nThis also makes it easier to integrate with other libraries that use Numpy such as SciPy and Matplotlib.\n",
        "opencvpython_exm": "\nimport cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('watch.jpg',cv2.IMREAD_GRAYSCALE)\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n",
        "theano_dec": "\nTheano is a Python library that lets you define mathematical expressions used in Machine Learning, \noptimize these expressions and evaluate those very efficiently by decisively \nusing GPUs in critical areas. It can rival typical full C-implementations in most of the cases.\nTheano was written at the LISA lab with the intention of providing rapid development \nof efficient machine learning algorithms. It is released under a BSD license.\n",
        "theano_exm": "\nfrom theano import *\na = tensor.dmatrix()\nb = tensor.dmatrix()\nc = tensor.dot(a,b)\nf = theano.function([a,b], c)\nd = f([[0, -1, 2],[4, 11, 2]], [[3, -1],[1,2],[6,1]])\nprint (d)\n",
        "fire_dec": "\nPython Fire is a library for automatically generating command line interfaces (CLIs) with a single line of code.\nIt will turn any Python module, class, object, function, etc. (any Python component will work!) into a CLI. \nIt\u2019s called Fire because when you call Fire(), it fires off your command.\n",
        "fire_exm": "\nimport fire\nclass IngestionStage(object):\n\n  def run(self):\n    return 'Ingesting! Nom nom nom...'\n\nclass DigestionStage(object):\n\n  def run(self, volume=1):\n    return ' '.join(['Burp!'] * volume)\n\n  def status(self):\n    return 'Satiated.'\n\nclass Pipeline(object):\n\n  def __init__(self):\n    self.ingestion = IngestionStage()\n    self.digestion = DigestionStage()\n\n  def run(self):\n    self.ingestion.run()\n    self.digestion.run()\n\nif __name__ == '__main__':\n  fire.Fire(Pipeline)\n",
        "arrow_dec": "\nArrow is a Python library that offers a sensible and human-friendly approach to creating, \nmanipulating, formatting and converting dates, times and timestamps. \nIt implements and updates the datetime type, plugging gaps in functionality and providing \nan intelligent module API that supports many common creation scenarios. \nSimply put, it helps you work with dates and times with fewer imports and a lot less code.\n",
        "arrow_exm": "\n>>> import arrow\n>>> arrow.get('2013-05-11T21:23:58.970460+07:00')\n<Arrow [2013-05-11T21:23:58.970460+07:00]>\n\n>>> utc = arrow.utcnow()\n>>> utc\n<Arrow [2013-05-11T21:23:58.970460+00:00]>\n\n>>> utc = utc.shift(hours=-1)\n>>> utc\n<Arrow [2013-05-11T20:23:58.970460+00:00]>\n\n>>> local = utc.to('US/Pacific')\n>>> local\n<Arrow [2013-05-11T13:23:58.970460-07:00]>\n\n>>> local.timestamp()\n1368303838.970460\n\n>>> local.format()\n'2013-05-11 13:23:58 -07:00'\n\n>>> local.format('YYYY-MM-DD HH:mm:ss ZZ')\n'2013-05-11 13:23:58 -07:00'\n\n>>> local.humanize()\n'an hour ago'\n",
        "flashtext_dec": "\nThis module can be used to replace keywords in sentences or extract keywords from sentences. \nIt is based on the FlashText algorithm.\n",
        "flashtext_exm": "\n>>> from flashtext import KeywordProcessor\n>>> keyword_processor = KeywordProcessor()\n>>> keyword_processor.add_keyword('j2ee', 'Java')\n>>> 'j2ee' in keyword_processor\n>>> # output: True\n>>> keyword_processor.get_keyword('j2ee')\n>>> # output: Java\n>>> keyword_processor['colour'] = 'color'\n>>> keyword_processor['colour']\n>>> # output: color\n",
        "wxpython_dec": "\nwxPython is a cross-platform GUI toolkit for the Python programming language. \nIt allows Python programmers to create programs with a robust, \nhighly functional graphical user interface, simply and easily. \nIt is implemented as a set of Python extension modules that wrap the GUI components of \nthe popular wxWidgets cross platform library, which is written in C++.\n",
        "wxpython_exm": "\n# First things, first. Import the wxPython package.\nimport wx\n\n# Next, create an application object.\napp = wx.App()\n\n# Then a frame.\nfrm = wx.Frame(None, title=\"Hello World\")\n\n# Show it.\nfrm.Show()\n\n# Start the event loop.\napp.MainLoop()\n",
        "cirq_dec": "\nAn open source framework for programming quantum computers.\nCirq is a Python software library for writing, manipulating, and optimizing quantum circuits, \nand then running them on quantum computers and quantum simulators. \nCirq provides useful abstractions for dealing with today\u2019s noisy intermediate-scale \nquantum computers, where details of the hardware are vital to achieving state-of-the-art results.\n",
        "cirq_exm": "\nimport cirq\n\n# Pick a qubit.\nqubit = cirq.GridQubit(0, 0)\n\n# Create a circuit\ncircuit = cirq.Circuit(\n    cirq.X(qubit)**0.5,  # Square root of NOT.\n    cirq.measure(qubit, key='m')  # Measurement.\n)\nprint(\"Circuit:\")\nprint(circuit)\n\n# Simulate the circuit several times.\nsimulator = cirq.Simulator()\nresult = simulator.run(circuit, repetitions=20)\nprint(\"Results:\")\nprint(result)\n",
        "json_dec": "\nJSON in Python is a standard format inspired by JavaScript for data \nexchange and data transfer as text format over a network.\nGenerally, JSON is in string or text format. \nIt can be used by APIs and databases, and it represents objects as name/value pairs. \nJSON stands for JavaScript Object Notation.\n",
        "json_exm": "\n>>> import json\n>>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]')\n['foo', {'bar': ['baz', None, 1.0, 2]}]\n>>> json.loads('\"\\\"foo\\bar\"')\n'\"foo\bar'\n>>> from io import StringIO\n>>> io = StringIO('[\"streaming API\"]')\n>>> json.load(io)\n['streaming API']\n",
        "sys_dec": "\nThis module provides access to some variables used or maintained by the interpreter \nand to functions that interact strongly with the interpreter. It is always available.\n",
        "sys_exm": "\n>>> import sys\n>>>sys.path\n['', 'C:\\python36\\Lib\\idlelib', 'C:\\python36\\python36.zip', \n'C:\\python36\\DLLs', 'C:\\python36\\lib', 'C:\\python36',\n'C:\\Users\\acer\\AppData\\Roaming\\Python\\Python36\\site-packages', \n'C:\\python36\\lib\\site-packages']\n",
        "instapy_dec": "\nTooling that automates your social media interactions to \"farm\" Likes, Comments, \nand Followers on Instagram implemented in Python using the Selenium module.\n",
        "instapy_exm": "\nfrom instapy import InstaPy\nsession = InstaPy(username=\"test\", password=\"test1111\")\nsession.login()\nsession.end\nquit()\n",
        "cython_dec": "\nCython is an optimising static compiler for both the Python programming language \nand the extended Cython programming language (based on Pyrex). \nIt makes writing C extensions for Python as easy as Python itself.\n",
        "cython_exm": "\ndef primes(nb_primes: cython.int):\n    i: cython.int\n    p: cython.int[1000]\n\n    if nb_primes > 1000:\n        nb_primes = 1000\n\n if not cython.compiled:  # Only if regular Python is running\n        p = [0] * 1000       # Make p work almost like a C array\n\n    len_p: cython.int = 0  # The current number of elements in p.\n    n: cython.int = 2\n    while len_p < nb_primes:\n        # Is n prime?\n        for i in p[:len_p]:\n            if n % i == 0:\n                break\n\n        # If no break occurred in the loop, we have a prime.\n        else:\n            p[len_p] = n\n            len_p += 1\n        n += 1\n\n    # Let's copy the result into a Python list:\n    result_as_list = [prime for prime in p[:len_p]]\n    return result_as_list\n",
        "pytube_dec": "\npytube is a very serious, lightweight, dependency-free \nPython library (and command-line utility) for downloading YouTube Videos.\n",
        "pytube_exm": "\n>>> from pytube import YouTube\n>>> YouTube('https://youtu.be/9bZkp7q19f0').streams.first().download()\n>>> yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')\n>>> yt.streams\n... .filter(progressive=True, file_extension='mp4')\n... .order_by('resolution')\n... .desc()\n... .first()\n... .download()\n",
        "typer_dec": "\nTyper is a library for building CLI applications that users will love using and developers will love creating. \nBased on Python 3.6+ type hints.\n",
        "typer_exm": "\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    typer.echo(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        typer.echo(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        typer.echo(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n",
        "rich_dec": "\nRich is a Python library for writing rich text (with color and style) to the terminal, \nand for displaying advanced content such as tables, markdown, and syntax highlighted code.\nUse Rich to make your command line applications visually \nappealing and present data in a more readable way. \nRich can also be a useful debugging aid by pretty printing and syntax highlighting data structures.\n",
        "rich_exm": "\nfrom typing import List\nfrom rich.console import Console, OverflowMethod\n\nconsole = Console(width=14)\nsupercali = \"supercalifragilisticexpialidocious\"\n\noverflow_methods: List[OverflowMethod] = [\"fold\", \"crop\", \"ellipsis\"]\nfor overflow in overflow_methods:\n    console.rule(overflow)\nconsole.print(supercali, overflow=overflow, style=\"bold blue\")\n    console.print()\n",
        "dearpygui_dec": "\nWelcome to the Dear PyGui wiki! Always in construction - feel free to edit and contribute!\nDear PyGui is an easy-to-use, dynamic, GPU-Accelerated, \ncross-platform graphical user interface (GUI) framework for Python. \nAs an extended wrapping of Dear ImGui, Dear PyGui is highly performant. \nIt is written primarily in C/C++ and uses your GPU for rendering.\nFeatures include traditional GUI elements to display text, images and various controls, \nsuch as buttons, radio buttons, and menus and various methods to create a functional and \nbeautiful layout. Additionally, it offers incredibly dynamic charts, tables, drawings and tools \nfor application development, such as built-in documentation, logging, and debugger.\nAs a GUI toolkit, it is well suited for creating simple user interfaces to wrap basic\ncommand line interfaces as well as to developing complex and demanding graphical interfaces. \nIt offers a solid framework for developing science, engineering, games, data science and other \napplications that require fast and interactive interfaces.\n",
        "dearpygui_exm": "\nimport dearpygui.dearpygui as dpg\n\nwith dpg.window(label=\"Tutorial\"):\n\n    dpg.add_button(label=\"Apply\")\n    dpg.add_same_line(spacing=10)\n    dpg.add_button(label=\"Apply\")\n    dpg.add_same_line(spacing=10)\n    dpg.add_button(label=\"Apply\")\n    dpg.add_spacing(count=5)\n\n    # printing the widgets unique id\n    id=dpg.add_button(label=\"Press me\")\n    print(id)\n\ndpg.start_dearpygui() \n",
        "prettyerrors_dec" : "Prettify Python exception output to make it legible.",
        "prettyerrors_exm": "\nimport pretty_errors\npretty_errors.configure(\n    separator_character = '*',\n    filename_display    = pretty_errors.FILENAME_EXTENDED,\n    line_number_first   = True,\n    display_link        = True,\n    lines_before        = 5,\n    lines_after         = 2,\n    line_color          = pretty_errors.RED + '> ' + pretty_errors.default_config.line_color,\n    code_color          = '  ' + pretty_errors.default_config.line_color,\n    truncate_code       = True,\n    display_locals      = True\n)\npretty_errors.blacklist('c:/python')\n",
        "diagrams_dec": "\nDiagrams lets you draw the cloud system architecture in Python code. \nIt was born for prototyping a new system architecture design without any design tools. \nYou can also describe or visualize the existing system architecture as well. \nDiagrams currently supports main major providers including: AWS, Azure, GCP, \nKubernetes, Alibaba Cloud, Oracle Cloud etc... It also supports On-Premise nodes, \nSaaS and major Programming frameworks and languages.\nDiagram as Code also allows you to track the architecture diagram changes in any version control system.\n",
        "diagrams_exm": "\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\ngraph_attr = {\n    \"fontsize\": \"45\",\n    \"bgcolor\": \"transparent\"\n}\n\nwith Diagram(\"Simple Diagram\", show=False, graph_attr=graph_attr):\n    EC2(\"web\")\n",
        "hiplot_dec": "\nHiPlot is a lightweight interactive visualization tool to help AI \nresearchers discover correlations and patterns in high-dimensional \ndata using parallel plots and other graphical ways to represent information.\n",
        "hiplot_exm": "\n# my_fetcher.py\nfrom pathlib import Path\nimport hiplot as hip\ndef fetch_my_experiment(uri):\n    # Only apply this fetcher if the URI starts with myxp://\n    PREFIX=\"myxp://\"\n    if not uri.startswith(PREFIX):\n        # Let other fetchers handle this one\n        raise hip.ExperimentFetcherDoesntApply()\n    uri = uri[len(PREFIX):]  # Remove the prefix\n\n    return hip.Experiment.from_csv(uri + '/data.csv')\n",
        "selenium_dec": "\nSelenium Python bindings provides a simple API to write \nfunctional/acceptance tests using Selenium WebDriver.\nThrough Selenium Python API you can access all functionalities \nof Selenium WebDriver in an intuitive way.\nSelenium Python bindings provide a convenient API to access\nSelenium WebDrivers like Firefox, Ie, Chrome, Remote etc. \nThe current supported Python versions are 3.5 and above.\n ",
        "selenium_exm": "\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.Firefox()\ndriver.get(\"http://www.python.org\")\nassert \"Python\" in driver.title\nelem = driver.find_element_by_name(\"q\")\nelem.clear()\nelem.send_keys(\"pycon\")\nelem.send_keys(Keys.RETURN)\nassert \"No results found.\" not in driver.page_source\ndriver.close()\n",
        "pandas_dec": "\nPandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\nbuilt on top of the Python programming language.\n ",
        "pandas_exm": "\nIn [1]: import pandas as pd\nIn [2]: df = pd.DataFrame(\n   ...:     {\n   ...:         \"Name\": [\n   ...:             \"Braund, Mr. Owen Harris\",\n   ...:             \"Allen, Mr. William Henry\",\n   ...:             \"Bonnell, Miss. Elizabeth\",\n   ...:         ],\n   ...:         \"Age\": [22, 35, 58],\n   ...:         \"Sex\": [\"male\", \"male\", \"female\"],\n   ...:     }\n   ...: )\n   ...: \n\nIn [3]: df\nOut[3]: \nName  Age     Sex\n0   Braund, Mr. Owen Harris   22    male\n1  Allen, Mr. William Henry   35    male\n2  Bonnell, Miss. Elizabeth   58  female\n ",
        "delorean_dec": "\nDelorean is the name of the car in the movie Back to the Future. \nThe movie deals with a lot of time travel, hence the name Delorean as a module dealing with datetimes.\nDelorean is a library for clearing up the inconvenient truths \nthat arise dealing with datetimes in Python. \nnderstanding that timing is a delicate enough of a problem delorean hopes to provide a \ncleaner less troublesome solution to shifting, manipulating, generating datetimes.\nDelorean stands on the shoulders of giants pytz and dateutil.\nDelorean will provide natural language improvements for manipulating time,\nas well as datetime abstractions for ease of use. \nThe overall goal is to improve datetime manipulations, with a little bit of software and philosophy.\nPretty much make you a badass, time traveller.\n ",
        "delorean_exm": "\nfrom delorean import Delorean\n\nd = Delorean()\nd = d.shift('US/Eastern')\nreturn d\n ",
        "sh_dec": "\nsh is a full-fledged subprocess replacement for Python 2.6 - 3.8,\nPyPy and PyPy3 that allows you to call any program as if it were a function.\n ",
        "sh_exm": "\nfrom sh import tar\ntar(\"cvf\", \"/tmp/test.tar\", \"/my/home/directory/\")\n\n# resolves to \"curl http://duckduckgo.com/ -o page.html --silent\"\ncurl(\"http://duckduckgo.com/\", o=\"page.html\", silent=True)\n\n# or if you prefer not to use keyword arguments, this does the same thing:\ncurl(\"http://duckduckgo.com/\", \"-o\", \"page.html\", \"--silent\")\n\n# resolves to \"adduser amoffat --system --shell=/bin/bash --no-create-home\"\nadduser(\"amoffat\", system=True, shell=\"/bin/bash\", no_create_home=True)\n\n# or\nadduser(\"amoffat\", \"--system\", \"--shell\", \"/bin/bash\", \"--no-create-home\")\n ",
        "pymc_dec": "\nBayesian estimation, particularly using Markov chain Monte Carlo (MCMC), \nis an increasingly relevant approach to statistical estimation. \nHowever, few statistical software packages implement MCMC samplers, \nand they are non-trivial to code by hand. \npymc is a python package that implements the Metropolis-Hastings algorithm as a python class, \nand is extremely flexible and applicable to a large suite of problems. \npymc includes methods for summarizing output, plotting, goodness-of-fit and convergence diagnostics.\n*pymc only requires NumPy. All other dependencies such as matplotlib, SciPy, pytables, sqlite or mysql are optional.\n ",
        "pymc_exm": "\nfrom pymc import DiscreteUniform, Exponential, deterministic, Poisson, Uniform\nimport numpy as np\n\ndisasters_array =        np.array([ 4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6,\n                   3, 3, 5, 4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5,\n                   2, 2, 3, 4, 2, 1, 3, 2, 2, 1, 1, 1, 1, 3, 0, 0,\n                   1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1,\n                   0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2,\n                   3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4, 2, 0, 0, 1, 4,\n                   0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])\n\nswitchpoint = DiscreteUniform('switchpoint', lower=0, upper=110, doc='Switchpoint[year]')\nearly_mean = Exponential('early_mean', beta=1.)\nlate_mean = Exponential('late_mean', beta=1.)\n\n@deterministic(plot=False)\ndef rate(s=switchpoint, e=early_mean, l=late_mean):\n    ''' Concatenate Poisson means '''\n    out = np.empty(len(disasters_array))\n    out[:s] = e\n    out[s:] = l\n    return out\n",
        "fuzzywuzzy_dec": "\nFuzzy string matching like a boss. It uses Levenshtein Distance to calculate the \ndifferences between sequences in a simple-to-use package.\n",
        "fuzzywuzzy_exm": "\n>>> from fuzzywuzzy import fuzz\n>>> from fuzzywuzzy import process\n>>> fuzz.ratio(\"this is a test\", \"this is a test!\")\n    97\n>>> fuzz.partial_ratio(\"this is a test\", \"this is a test!\")\n    100\n",
        "progressbar_dec": "\nA text progress bar is typically used to display the progress of a long running operation, \nproviding a visual cue that processing is underway.\nThe ProgressBar class manages the current progress, and the format of the \nline is given by a number of widgets. A widget is an object that may display \ndifferently depending on the state of the progress bar.\n",
        "progressbar_exm": "\nimport time\nimport progressbar\n\nwidgets=[\n    ' [', progressbar.Timer(), '] ',\n    progressbar.Bar(),\n    ' (', progressbar.ETA(), ') ',\n]\nfor i in progressbar.progressbar(range(20), widgets=widgets):\n    time.sleep(0.1)\n"


    },

    "what_is_python" : {
        "whs_py": "\nPython is an interpreted high-level general-purpose programming language. \nPython's design philosophy emphasizes code readability with its notable use of significant indentation. \nIts language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\nPython is dynamically-typed and garbage-collected. \nIt supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. \nPython is often described as a \"batteries included\" language due to its comprehensive standard library.\nGuido van Rossum began working on Python in the late 1980s, as a successor to the ABC programming language, \nand first released it in 1991 as Python 0.9.0.\nPython 2.0 was released in 2000 and introduced new features, such as list comprehensions \nand a garbage collection system using reference counting and was discontinued with version 2.7.18 in 2020. \nPython 3.0 was released in 2008 and was a major revision of the language that is not completely backward-compatible \nand much Python 2 code does not run unmodified on Python 3.\nPython consistently ranks as one of the most popular programming languages.",
        "woh_wrote": "\nPython was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) \nin the Netherlands as a successor to ABC programming language, which was inspired by SETL, \ncapable of exception handling and interfacing with the Amoeba operating system. \nIts implementation began in December 1989. Van Rossum shouldered sole responsibility for the project, \nas the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities \nas Python's Benevolent Dictator For Life, a title the Python community bestowed upon him to reflect his long-term commitment as \nthe project's chief decision-maker. He now shares his leadership as a member of a five-person steering council. \nIn January 2019, active Python core developers elected Brett Cannon, Nick Coghlan, \nBarry Warsaw, Carol Willing and Van Rossum to a five-member \"Steering Council\" to lead the project.\nGuido van Rossum has since then withdrawn his nomination for the 2020 Steering council.\nPython 2.0 was released on 16 October 2000, with many major new features, \nincluding a cycle-detecting garbage collector and support for Unicode.\nPython 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely backward-compatible.\nMany of its major features were backported to Python 2.6.x and 2.7.x version series. \nReleases of Python 3 include the 2to3 utility, which automates (at least partially) the translation of Python 2 code to Python 3.\nPython 2.7's end-of-life date was initially set at 2015 then postponed to 2020 out of concern \nthat a large body of existing code could not easily be forward-ported to Python 3.\nNo more security patches or other improvements will be released for it.\nWith Python 2's end-of-life, only Python 3.6.x and later are supported.\nPython 3.9.2 and 3.8.8 were expedited as all versions of Python (including 2.7) had security issues, \nleading to possible remote code execution and web cache poisoning.",
        "exm": "\nHello world program:\n\nprint('Hello, world!')\nProgram to calculate the factorial of a positive integer:\n\nn = int(input('Type a number, and its factorial will be printed: '))\n\nif n < 0:\n    raise ValueError('You must enter a non negative integer')\n\nfactorial = 1\nfor i in range(2, n + 1):\n    factorial *= i\n\nprint(factorial)"
    },

    "_comment": "Coded by AnonC0DER",
    "_comment" : "https://github.com/AnonC0DER/PyLe"
}
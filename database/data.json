{
    "_comment" : "Trying for shorter codes :)",

    "Colors" : {
        "colored_dec": "\nVery simple Python library for color and formatting in terminal. \nCollection of color codes and names for 256 color terminal setups. \nThe following is a list of 256 colors for Xterm, containing an example of the displayed color, Xterm Name, Xterm Number and HEX.\n",
        "colored_exm": "\nHow to use the module in your own python code:\n\n>>> from colored import fg, bg, attr\n>>>\n>>> print ('%s Hello World !!! %s' % (fg(1), attr(0)))\n Hello World !!!\n>>>\n>>> print ('%s%s Hello World !!! %s' % (fg(1), bg(15), attr(0)))\n Hello World !!!\nUse description:\n\n>>> print ('%s%s Hello World !!! %s' % (fg('white'), bg('yellow'), attr('reset')))\n Hello World !!!\n>>>\n>>> print ('%s%s Hello World !!! %s' % (fg('orchid'), attr('bold'), attr('reset')))\n Hello World !!!\n>>>\n>>> color = bg('indian_red_1a') + fg('white')\n>>> reset = attr('reset')\n>>> print (color + 'Hello World !!!' + reset)\nHello World !!!\nOr use HEX code:\n\n>>> color = fg('#C0C0C0') + bg('#00005f')\n>>> res = attr('reset')\n>>> print (color + \"Hello World !!!\" + res)\nHello World !!!\n",
        "colorama_dec": "\nANSI escape character sequences have long been used to produce colored terminal text and cursor positioning on Unix and Macs. \nColorama makes this work on Windows, too, by wrapping stdout, stripping ANSI sequences it finds (which would appear as gobbledygook in the output), and converting them into the appropriate win32 calls to modify the state of the terminal. On other platforms, Colorama does nothing.\nThis has the upshot of providing a simple cross-platform API for printing colored terminal text from Python, and has the happy side-effect that existing applications or libraries which use ANSI sequences to produce colored output on Linux or Macs can now also work on Windows, simply by calling colorama.init()\nAn alternative approach is to install ansi.sys on Windows machines, which provides the same behaviour for all applications running in terminals. \nColorama is intended for situations where that isn\u2019t easy (e.g., maybe your app doesn\u2019t have an installer.)\n",
        "colorama_exm": "\nColored Output\nCross-platform printing of colored text can then be done using Colorama\u2019s constant shorthand for ANSI escape sequences:\n\nfrom colorama import Fore, Back, Style\nprint(Fore.RED + 'some red text')\nprint(Back.GREEN + 'and with a green background')\nprint(Style.DIM + 'and in dim text')\nprint(Style.RESET_ALL)\nprint('back to normal now')\n\n\u2026or, Colorama can be used in conjunction with existing ANSI libraries such as the venerable Termcolor or the fabulous Blessings. This is highly recommended for anything more than trivial coloring:\n\nfrom colorama import init\nfrom termcolor import colored\n\n# use Colorama to make Termcolor work on Windows too\ninit()\n\n# then use Termcolor for all colored text output\nprint(colored('Hello, World!', 'green', 'on_red'))\n",
        "termcolor_dec" : "Termcolor is a python module for ANSII Color formatting for output in terminal.",
        "termcolor_exm": "\nimport sys\nfrom termcolor import colored, cprint\n\ntext = colored('Hello, World!', 'red', attrs=['reverse', 'blink'])\nprint(text)\ncprint('Hello, World!', 'green', 'on_red')\n\nprint_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan')\nprint_red_on_cyan('Hello, World!')\nprint_red_on_cyan('Hello, Universe!')\n\nfor i in range(10):\n    cprint(i, 'magenta', end=' ')\n\ncprint(\"Attention!\", 'red', attrs=['bold'], file=sys.stderr)\n"
    },
    
    "Machin_Learning" : {
        "scikit_dec": "\nScikit-learn is a Python module for machine learning built on top of SciPy and is distributed under the 3-Clause BSD license.\nThe project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed.\nSee the About us page for a list of core contributors.\nIt is currently maintained by a team of volunteers.\n",
        "scikit_req": "\nScikit-learn requires:\n\n. Python (>= 3.6)\n. NumPy (>= 1.13.3)\n. SciPy (>= 0.19.1)\n. joblib (>= 0.11)\n. threadpoolctl (>= 2.0.0)\n",
        "keras_dec": "\nKeras is a deep learning API written in Python, running on top of the machine learning platform TensorFlow. \nIt was developed with a focus on enabling fast experimentation. \nBeing able to go from idea to result as fast as possible is key to doing good research.\n",
        "keras_exm": "\nSetup\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import layers\nPrepare the dataset\nIn this example, we will be using the FashionMNIST dataset. But this same recipe can be used for other classification datasets as well.\n\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()\n\nx_train = x_train.astype(\"float32\") / 255.0\nx_train = np.reshape(x_train, (-1, 28, 28, 1))\ny_train = tf.one_hot(y_train, 10)\n\nx_test = x_test.astype(\"float32\") / 255.0\nx_test = np.reshape(x_test, (-1, 28, 28, 1))\ny_test = tf.one_hot(y_test, 10)\nDefine hyperparameters\nAUTO = tf.data.AUTOTUNE\nBATCH_SIZE = 64\nEPOCHS = 10\nConvert the data into TensorFlow Dataset objects\n# Put aside a few samples to create our validation set\nval_samples = 2000\nx_val, y_val = x_train[:val_samples], y_train[:val_samples]\nnew_x_train, new_y_train = x_train[val_samples:], y_train[val_samples:]\n\ntrain_ds_one = (\n    tf.data.Dataset.from_tensor_slices((new_x_train, new_y_train))\n    .shuffle(BATCH_SIZE * 100)\n    .batch(BATCH_SIZE)\n)\ntrain_ds_two = (\n    tf.data.Dataset.from_tensor_slices((new_x_train, new_y_train))\n    .shuffle(BATCH_SIZE * 100)\n    .batch(BATCH_SIZE)\n)\n# Because we will be mixing up the images and their corresponding labels, we will be\n# combining two shuffled datasets from the same training data.\ntrain_ds = tf.data.Dataset.zip((train_ds_one, train_ds_two))\n\nval_ds = tf.data.Dataset.from_tensor_slices((x_val, y_val)).batch(BATCH_SIZE)\n\ntest_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(BATCH_SIZE)\n",
        "xgboost_dec": "\nThat XGBoost is a library for developing fast and high performance gradient boosting tree models. \nThat XGBoost is achieving the best performance on a range of difficult machine learning tasks.\n",
        "xgboost_exm": "\n# First XGBoost model for Pima Indians dataset\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n# load data\ndataset = loadtxt('pima-indians-diabetes.csv', delimiter=\",\")\n# split data into X and y\nX = dataset[:,0:8]\nY = dataset[:,8]\n# split data into train and test sets\nseed = 7\ntest_size = 0.33\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n# fit model no training data\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\n# make predictions for test data\ny_pred = model.predict(X_test)\npredictions = [round(value) for value in y_pred]\n# evaluate predictions\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n",
        "statsmodels_dec": "\nStatsmodels is a Python package that provides a complement to scipy for statistical computations \nincluding descriptive statistics and estimation and inference for statistical models.\n",
        "statsmodels_exm": "\nThe Python Code using Statsmodels\nThe following Python code includes an example of Multiple Linear Regression, where the input variables are:\n\nInterest_Rate\nUnemployment_Rate\nThese two variables are used in the prediction of the dependent variable of Stock_Index_Price.\n\nHere is the complete syntax to perform the linear regression in Python using statsmodels (for larger datasets, you may consider to import your data):\n\nfrom pandas import DataFrame\nimport statsmodels.api as sm\n\nStock_Market = {'Year': [2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016],\n                'Month': [12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1],\n                'Interest_Rate': [2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75],\n                'Unemployment_Rate': [5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5.9,6.2,6.2,6.1],\n                'Stock_Index_Price': [1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047,965,943,958,971,949,884,866,876,822,704,719]        \n                }\n\ndf = DataFrame(Stock_Market,columns=['Year','Month','Interest_Rate','Unemployment_Rate','Stock_Index_Price']) \n\nX = df[['Interest_Rate','Unemployment_Rate']] # here we have 2 variables for the multiple linear regression. If you just want to use one variable for simple linear regression, then use X = df['Interest_Rate'] for example\nY = df['Stock_Index_Price']\n\nX = sm.add_constant(X) # adding a constant\n\nmodel = sm.OLS(Y, X).fit()\npredictions = model.predict(X) \n\nprint_model = model.summary()\nprint(print_model)\n",
        "tensorflow_dec": "\nTensorFlow is an open source software library for high performance numerical computation. \nIts flexible architecture allows easy deployment of computation across a variety of platforms (CPUs, GPUs, TPUs), \nand from desktops to clusters of servers to mobile and edge devices.\nOriginally developed by researchers and engineers from the Google Brain team within Google's AI organization, \nit comes with strong support for machine learning and deep learning and the flexible numerical computation core is used across many other scientific domains.\n",
        "tensorflow_exm": "\nExample :\nIn the code below, we defined two constant tensors and add one value to another:\n\nimport tensorflow as tf\n\nconst1 = tf.constant([[1,2,3], [1,2,3]]);\nconst2 = tf.constant([[3,4,5], [3,4,5]]);\n\nresult = tf.add(const1, const2);\n\nwith tf.Session() as sess:\n  output = sess.run(result)\n  print(output)\n"
    },

    "Telegram_bots" : {
        "python_telegram_bot_dec": "\nThis library provides a pure Python interface for the Telegram Bot API. It\u2019s compatible with Python versions 3.6+. PTB might also work on PyPy, though there have been a lot of issues before. Hence, PyPy is not officially supported.\nIn addition to the pure API implementation, this library features a number of high-level classes to make the development of bots easy and straightforward. These classes are contained in the telegram.ext submodule.\n",
        "python_telegram_bot_exm": "\nThis library uses the logging module. To set up logging to standard output, put:\n\nimport logging\nlogging.basicConfig(level=logging.DEBUG,\n                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nat the beginning of your script.\n\nYou can also use logs in your application by calling logging.getLogger() and setting the log level you want:\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\nIf you want DEBUG logs instead:\n\nlogger.setLevel(logging.DEBUG)\n",
        "pyrogram_dec": "Pyrogram is a modern, elegant and easy-to-use Telegram client library framework written from the ground up in Python and C. It enables you to easily create custom Telegram client applications for both user and bot identities (bot API alternative) via the MTProto API.",
        "pyrogram_req": "\nRequirements\n\n-Python 3.6 or higher.\n-A Telegram API key.",
        "pyrogram_exm": "\nfrom pyrogram import Client, filters\n\napp = Client(\"my_account\")\n\n\n@app.on_message(filters.private)\nasync def hello(client, message):\n    await message.reply_text(f\"Hello {message.from_user.mention}\")\n\n\napp.run()",
        "telegram_dec": "\nAn async API wrapper for Telegram bot API in Python\nPython 3.7+ is required to install and use telegram.py",
        "telegram_exm": "\nimport logging\n\nimport telegrampy\nfrom telegrampy.ext import commands\n\nlogging.basicConfig(level=logging.INFO, format=\"(%(asctime)s) %(levelname)s %(message)s\", datefmt=\"%m/%d/%y - %H:%M:%S %Z\")\nlogger = logging.getLogger(\"telegrampy\")\n\nbot = commands.Bot(\"token here\")\n\n@bot.command()\nasync def hi(ctx):\n    await ctx.send(\"Hello\")\n\nbot.run()"
    },

    "game_devel" : {
        "pygame_dec": "\nPygame is a free and open-source cross-platform library for the development of multimedia applications\nlike video games using Python. It uses the Simple DirectMedia Layer library and\nseveral other popular libraries to abstract the most common functions, \nmaking writing these programs a more intuitive task.",
        "pygame_exm": "\n# Simple pygame program\n\n# Import and initialize the pygame library\nimport pygame\npygame.init()\n\n# Set up the drawing window\nscreen = pygame.display.set_mode([500, 500])\n\n# Run until the user asks to quit\nrunning = True\nwhile running:\n\n    # Did the user click the window close button?\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Fill the background with white\n    screen.fill((255, 255, 255))\n    \n    # Draw a solid blue circle in the center\n    pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)\n\n    # Flip the display\n    pygame.display.flip()\n\n# Done! Time to quit.\npygame.quit()",
        "turtles_dec": "\nTurtle graphics is a popular way for introducing programming to kids. \nIt was part of the original Logo programming language developed by Wally Feurzeig, \nSeymour Papert and Cynthia Solomon in 1967.",
        "turtles_exm": "\nimport turtle \n\nninja = turtle.Turtle()\n\nninja.speed(10)\n\nfor i in range(180):\n    ninja.forward(100)\n    ninja.right(30)\n    ninja.forward(20)\n    ninja.left(60)\n    ninja.forward(50)\n    ninja.right(30)\n    \n    ninja.penup()\n    ninja.setposition(0, 0)\n    ninja.pendown()\n\n    ninja.right(2)\n    \nturtle.done()",
        "PyOpenGL_dec": "\nPyOpenGL is the most common cross platform Python binding to OpenGL and related APIs. \nThe binding is created using the standard ctypes library, \nand is provided under an extremely liberal BSD-style Open-Source license.",
        "PyOpenGL_exm": "\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\nfrom OpenGL.GLU import *\n\nwindow = 0                                             # glut window number\nwidth, height = 500, 400                               # window size\n\ndef draw():                                            # ondraw is called all the time\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) # clear the screen\n    glLoadIdentity()                                   # reset position\n   \n    # ToDo draw rectangle\n   \n    glutSwapBuffers()                                  # important for double buffering\n   \n\n# initialization\nglutInit()                                             # initialize glut\nglutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH)\nglutInitWindowSize(width, height)                      # set window size\nglutInitWindowPosition(0, 0)                           # set window position\nwindow = glutCreateWindow(\"noobtuts.com\")              # create window with title\nglutDisplayFunc(draw)                                  # set draw function callback\nglutIdleFunc(draw)                                     # draw all the time\nglutMainLoop()                                         # start everything"
    },

    "file_enc" : {
        "cryptography_dec": "\nCryptography is a package which provides cryptographic recipes and primitives to Python developers. \nOur goal is for it to be your \u201ccryptographic standard library\u201d. \nIt supports Python 3.6+ and PyPy3 7.2+.\nCryptography includes both high level recipes and low level interfaces to common cryptographic \nalgorithms such as symmetric ciphers, message digests, \nand key derivation functions.",
        "cryptography_exm": "\n>>> from cryptography.fernet import Fernet\n>>> # Put this somewhere safe!\n>>> key = Fernet.generate_key()\n>>> f = Fernet(key)\n>>> token = f.encrypt(b\"A really secret message. Not for prying eyes.\")\n>>> token\nb'...'\n>>> f.decrypt(token)\nb'A really secret message. Not for prying eyes.",
        "pycrypto_dec": "\nThis is a collection of both secure hash functions (such as SHA256 and RIPEMD160), \nand various encryption algorithms (AES, DES, RSA, ElGamal, etc.). \nThe package is structured to make adding new modules easy. This section is essentially complete, \nand the software interface will almost certainly not change in an incompatible way in the future; \nall that remains to be done is to fix any bugs that show up.",
        "pycrypto_exm": "\n>>> from Crypto.Cipher import AES\n>>> obj = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')\n>>> message = \"The answer is no\"\n>>> ciphertext = obj.encrypt(message)\n>>> obj2 = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')\n>>> obj2.decrypt(ciphertext)\n'The answer is no' ",
        "pyAesCrypt_dec": "\npyAesCrypt is a Python 3 file-encryption module and script that \nuses AES256-CBC to encrypt/decrypt files and binary streams.\npyAesCrypt is compatible with the AES Crypt file format (version 2).\nIt is Free Software, released under the Apache License, Version 2.0.\npyAesCrypt is brought to you by Marco Bellaccini - marco.bellaccini(at!)gmail.com.\nIMPORTANT SECURITY NOTE: version 2 of the AES Crypt file format does not authenticate the \u201cfile size modulo 16\u201d byte. \nThis implies that an attacker with write access to the encrypted file may \nalter the corresponding plaintext file size by up to 15 bytes.\nthere is no low-level memory management in Python, hence it is not possible to wipe \nmemory areas were sensitive information was stored.",
        "pyAesCrypt_exm": "\nimport pyAesCrypt\n# encryption/decryption buffer size - 64K\nbufferSize = 64 * 1024\npassword = \"foopassword\"\n# encrypt\npyAesCrypt.encryptFile(\"data.txt\", \"data.txt.aes\", password, bufferSize)\n# decrypt\npyAesCrypt.decryptFile(\"data.txt.aes\", \"dataout.txt\", password, bufferSize)"
    },

    "sqllib" : {
        "SQLite_dec": "\nSQLite is a C library that provides a lightweight disk-based database that doesn\u2019t require \na separate server process and allows accessing the database using a nonstandard \nvariant of the SQL query language. Some applications can use SQLite for internal data storage. \nIt\u2019s also possible to prototype an application using SQLite and then port the code \nto a larger database such as PostgreSQL or Oracle.\nThe sqlite3 module was written by Gerhard H\u00e4ring. It provides a SQL interface \ncompliant with the DB-API 2.0 specification described by PEP 249.",
        "SQLite_exm": "\nimport sqlite3\ncon = sqlite3.connect('example.db')\ncur = con.cursor()\n\n# Create table\ncur.execute('''CREATE TABLE stocks\n(date text, trans text, symbol text, qty real, price real)''')\n\n# Insert a row of data\ncur.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")\n\n# Save (commit) the changes\ncon.commit()\n\n# We can also close the connection if we are done with it.\n# Just be sure any changes have been committed or they will be lost.\ncon.close()",
        "mysql_dec": "\nMySQL Connector/Python enables Python programs to access MySQL databases, \nusing an API that is compliant with the Python Database API Specification v2.0 (PEP 249).",
        "mysql_exm": "\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection(host_name, user_name, user_password):\n    connection = None\n    try:\n        connection = mysql.connector.connect(\n            host=host_name,\n            user=user_name,\n            passwd=user_password)\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\n    return connection\n\nconnection = create_connection(\"localhost\", \"root\", \"\")",
        "postgres_dec": "\nPostgreSQL is one of the most advanced and widely used relational database management systems. \nIt's extremely popular for many reasons, a few of which include it being open source, \nits extensibility, and its ability to handle many different types of applications and varying loads.\nWith Python, you can easily establish a connection to your PostgreSQL database. \nThere are many Python drivers for PostgreSQL, with \"psycopg\" being the most popular one. \nIts current version is psycopg2.\nIn this article, we'll be discussing how to access a PostgreSQL database \nin Python using the psycopg2 driver.",
        "postgres_exm": "\nimport psycopg2\n\ncon = psycopg2.connect(database=\"postgres\", user=\"postgres\", password=\"Kaliakakya\", host=\"127.0.0.1\", port=\"5432\")\nprint(\"Database opened successfully\")\n\ncur = con.cursor()\n\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3419, 'Abel', 17, 'Computer Science', 'ICT')\");\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3421, 'Joel', 17, 'Computer Science', 'ICT')\");\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3422, 'Antony', 19, 'Electrical Engineering', 'Engineering')\");\ncur.execute(\"INSERT INTO STUDENT (ADMISSION,NAME,AGE,COURSE,DEPARTMENT) VALUES (3423, 'Alice', 18, 'Information Technology', 'ICT')\");\n\ncon.commit()\nprint(\"Records inserted successfully\")\ncon.close()"
    },

    "what_is_python" : {
        "whs_py": "\nPython is an interpreted high-level general-purpose programming language. \nPython's design philosophy emphasizes code readability with its notable use of significant indentation. \nIts language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\nPython is dynamically-typed and garbage-collected. \nIt supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. \nPython is often described as a \"batteries included\" language due to its comprehensive standard library.\nGuido van Rossum began working on Python in the late 1980s, as a successor to the ABC programming language, \nand first released it in 1991 as Python 0.9.0.\nPython 2.0 was released in 2000 and introduced new features, such as list comprehensions \nand a garbage collection system using reference counting and was discontinued with version 2.7.18 in 2020. \nPython 3.0 was released in 2008 and was a major revision of the language that is not completely backward-compatible \nand much Python 2 code does not run unmodified on Python 3.\nPython consistently ranks as one of the most popular programming languages.",
        "woh_wrote": "\nPython was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) \nin the Netherlands as a successor to ABC programming language, which was inspired by SETL, \ncapable of exception handling and interfacing with the Amoeba operating system. \nIts implementation began in December 1989. Van Rossum shouldered sole responsibility for the project, \nas the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities \nas Python's Benevolent Dictator For Life, a title the Python community bestowed upon him to reflect his long-term commitment as \nthe project's chief decision-maker. He now shares his leadership as a member of a five-person steering council. \nIn January 2019, active Python core developers elected Brett Cannon, Nick Coghlan, \nBarry Warsaw, Carol Willing and Van Rossum to a five-member \"Steering Council\" to lead the project.\nGuido van Rossum has since then withdrawn his nomination for the 2020 Steering council.\nPython 2.0 was released on 16 October 2000, with many major new features, \nincluding a cycle-detecting garbage collector and support for Unicode.\nPython 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely backward-compatible.\nMany of its major features were backported to Python 2.6.x and 2.7.x version series. \nReleases of Python 3 include the 2to3 utility, which automates (at least partially) the translation of Python 2 code to Python 3.\nPython 2.7's end-of-life date was initially set at 2015 then postponed to 2020 out of concern \nthat a large body of existing code could not easily be forward-ported to Python 3.\nNo more security patches or other improvements will be released for it.\nWith Python 2's end-of-life, only Python 3.6.x and later are supported.\nPython 3.9.2 and 3.8.8 were expedited as all versions of Python (including 2.7) had security issues, \nleading to possible remote code execution and web cache poisoning.",
        "exm": "\nHello world program:\n\nprint('Hello, world!')\nProgram to calculate the factorial of a positive integer:\n\nn = int(input('Type a number, and its factorial will be printed: '))\n\nif n < 0:\n    raise ValueError('You must enter a non negative integer')\n\nfactorial = 1\nfor i in range(2, n + 1):\n    factorial *= i\n\nprint(factorial)"
    },

    "_comment": "Coded by AnonC0DER",
    "_comment" : "https://github.com/AnonC0DER/PyLe"
}
